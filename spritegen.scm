;;TODO Create sprite png from resized images
(define (create-sprite file-pattern width height single)
    (let* ((parts (cadr (file-glob file-pattern 1)))
            (offset 0)
            (sprite (car (gimp-image-new width height RGB)))
            (dest-file (car (gimp-layer-new sprite width height RGBA-IMAGE "sprite img" 100 NORMAL-MODE))))
         (gimp-drawable-fill dest-file TRANSPARENT-FILL)
        (while (not (null? parts))
            (let* ((fn (car parts))
                (layer (car (gimp-file-load RUN-NONINTERACTIVE fn fn))))
                (gimp-image-add-layer sprite layer -1)
                (gimp-layer-set-offsets layer offset 0)
                (gimp-drawable-fill layer TRANSPARENT-FILL)
                (+ offset single)))
        (set! dest-file (car (gimp-image-flatten sprite)))
        (gimp-file-save RUN-NONINTERACTIVE sprite dest-file "generated_sprite.pnh")))

;;Basic image resizer, kees track of things needed by create-sprite func
(define (gen-resize pattern pre w h)
    (let* ((newSize 0) (pass-p (string-append pre pattern)))
    (let* ((files (cadr (file-glob pattern 1))) )
        (while (not (null? files))
            (let* ((fname (car files))
                    (targetf (string-append pre fname))
                    (image (car (gimp-file-load RUN-NONINTERACTIVE fname fname)))
                    (drawable (car (gimp-image-get-active-layer image))))
                (gimp-image-scale-full image w h INTERPOLATION-CUBIC)
                (gimp-file-save RUN-NONINTERACTIVE image drawable targetf targetf)
                (set! newSize (+ newSize w))
                (gimp-image-delete image))
            (set! files (cdr files)))
      (create-sprite pass-p newSize h w))))
