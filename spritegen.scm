;;Creates resized images
(define (gen-sprite pattern pre w h)
    (let* (
            (files (cadr (file-glob pattern 1)))
            (total (length files))
            (sprite-img (car (gimp-image-new (* w total) h RGB)))
            (offset 0)
          )
        (if (= (string-length pre) 0)
            (set! pre (string->number total))
            (set! pre (string-append pre (number->string total)))
        )
        (while (not (null? files))
            (let* (
                    (fname (car files))
                    (targetf (string-append pre fname))
                    (image (car (gimp-file-load RUN-NONINTERACTIVE fname fname)))
                    (drawable (car (gimp-image-get-active-layer image)))
                    (draw-spr (car (gimp-layer-copy drawable TRUE)))
                    (sprite-layer '())
                  )
                (gimp-image-scale-full image w h INTERPOLATION-CUBIC)
                (gimp-file-save RUN-NONINTERACTIVE image drawable targetf targetf)
                ;;(set! sprite-layer (car (gimp-layer-new-from-drawable draw-spr sprite-img)))
                (gimp-layer-set-name draw-spr (string-append "layer" (number->string offset)))
                (set! sprite-layer (car (gimp-layer-new-from-drawable draw-spr sprite-img)))
                ;;(gimp-image-add-layer sprite-img draw-spr -1)
                (gimp-layer-set-offsets draw-spr offset 0)
                ;;(gimp-image-insert-layer sprite-img draw-spr 0 0)
                (gimp-image-delete image)
                (set! offset (+ offset w))
            )
            (set! files (cdr files))
        )
        (set! offset (gimp-image-flatten sprite-img))
        (gimp-file-save RUN-NONINTERACTIVE sprite-img offset "generated_sprite.png" "generated_sprite.png")
    )
)
