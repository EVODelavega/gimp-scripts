(define (mk-sprites pattern pre w h)
    (let* (
            (files (cadr (file-glob pattern 1)))
            (total (length files))
            (offset 0)
            (sprite-file (car (gimp-image-new (* total w) h RGB)))
            (layer (car (gimp-layer-new sprite-file (* total w) h RGBA-IMAGE "bg" 1 NORMAL)))
          )
        (gimp-image-add-layer sprite-file layer 0)
        (gimp-drawable-fill layer TRANSPARENT-FILL)
        (set! layer (gimp-image-flatten sprite-file))
        (if (= (string-length pre) 0)
            (set! pre (number->string total))
            (set! pre (string-append pre (number->string total)))
        )
        (while (not (null? files))
            (let* (
                    (fname (car files))
                    (targetf (string-append pre fname))
                    (image (car (gimp-file-load RUN-NONINTERACTIVE fname fname)))
                    (drawable (car (gimp-image-get-active-layer image)))
                  )
                (gimp-image-scale-full image w h INTERPOLATION-CUBIC)
                (gimp-file-save RUN-NONINTERACTIVE image drawable targetf targetf)
                (set! layer (copy-layers sprite-file drawable))
                (gimp-layer-set-offsets layer offset 0)
                (set! offset (+ offset w))
                (set! layer (gimp-image-flatten sprite-file))
            )
        )
        (set! pre (string-append pre "_sprite.png"))
        (gimp-file-save RUN-NONINTERACTIVE sprite-file layer pre "")
    )
)

(define (copy-layers image layer)
    (let* (
            (added-layer (car (gimp-layer-copy layer 1)))
          )
        (gimp-image-add-layer image added-layer 0)
        added-layer
    )
)
